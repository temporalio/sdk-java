diff --git a/temporal-sdk/src/main/java/io/temporal/failure/ApplicationErrorCategory.java b/temporal-sdk/src/main/java/io/temporal/failure/ApplicationErrorCategory.java
deleted file mode 100644
index 6579dfde..00000000
--- a/temporal-sdk/src/main/java/io/temporal/failure/ApplicationErrorCategory.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2024 Temporal Technologies, Inc. All Rights Reserved.
- *
- * Copyright (C) 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
- *
- * Modifications copyright (C) 2017 Uber Technologies, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this material except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package io.temporal.failure;
-
-/**
- * Mirrors the proto definition for ApplicationErrorCategory. Used to categorize application
- * failures.
- *
- * @see io.temporal.api.enums.v1.ApplicationErrorCategory
- */
-public enum ApplicationErrorCategory {
-  UNSPECIFIED,
-  /** Expected application error with little/no severity. */
-  BENIGN,
-  ;
-
-  public static ApplicationErrorCategory fromProto(
-      io.temporal.api.enums.v1.ApplicationErrorCategory protoCategory) {
-    if (protoCategory == null) {
-      return UNSPECIFIED;
-    }
-    switch (protoCategory) {
-      case APPLICATION_ERROR_CATEGORY_BENIGN:
-        return BENIGN;
-      case APPLICATION_ERROR_CATEGORY_UNSPECIFIED:
-      case UNRECOGNIZED:
-      default:
-        // Fallback unrecognized or unspecified proto values as UNSPECIFIED
-        return UNSPECIFIED;
-    }
-  }
-
-  public io.temporal.api.enums.v1.ApplicationErrorCategory toProto() {
-    switch (this) {
-      case BENIGN:
-        return io.temporal.api.enums.v1.ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_BENIGN;
-      case UNSPECIFIED:
-      default:
-        // Fallback to UNSPECIFIED for unknown values
-        return io.temporal.api.enums.v1.ApplicationErrorCategory
-            .APPLICATION_ERROR_CATEGORY_UNSPECIFIED;
-    }
-  }
-}
diff --git a/temporal-sdk/src/main/java/io/temporal/failure/ApplicationFailure.java b/temporal-sdk/src/main/java/io/temporal/failure/ApplicationFailure.java
index f9246d31..0df044ab 100644
--- a/temporal-sdk/src/main/java/io/temporal/failure/ApplicationFailure.java
+++ b/temporal-sdk/src/main/java/io/temporal/failure/ApplicationFailure.java
@@ -21,6 +21,7 @@
 package io.temporal.failure;
 
 import com.google.common.base.Strings;
+import io.temporal.api.enums.v1.ApplicationErrorCategory;
 import io.temporal.common.converter.DataConverter;
 import io.temporal.common.converter.EncodedValues;
 import io.temporal.common.converter.Values;
@@ -51,7 +52,7 @@ import javax.annotation.Nullable;
  *   <li>nonRetryable is set to false
  *   <li>details are set to null
  *   <li>stack trace is copied from the original exception
- *   <li>stack category is set to ApplicationErrorCategory.UNSPECIFIED
+ *   <li>stack category is set to ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_UNSPECIFIED
  * </ul>
  */
 public final class ApplicationFailure extends TemporalFailure {
@@ -101,7 +102,7 @@ public final class ApplicationFailure extends TemporalFailure {
         new EncodedValues(details),
         cause,
         null,
-        ApplicationErrorCategory.UNSPECIFIED);
+        ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_UNSPECIFIED);
   }
 
   /**
@@ -133,7 +134,7 @@ public final class ApplicationFailure extends TemporalFailure {
         new EncodedValues(details),
         cause,
         nextRetryDelay,
-        ApplicationErrorCategory.UNSPECIFIED);
+        ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_UNSPECIFIED);
   }
 
   /**
@@ -175,7 +176,7 @@ public final class ApplicationFailure extends TemporalFailure {
         new EncodedValues(details),
         cause,
         null,
-        ApplicationErrorCategory.UNSPECIFIED);
+        ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_UNSPECIFIED);
   }
 
   /**
@@ -274,43 +275,4 @@ public final class ApplicationFailure extends TemporalFailure {
         + ", nonRetryable="
         + nonRetryable;
   }
-
-  public static boolean isBenignApplicationFailure(@Nullable Throwable t) {
-    if (t == null) {
-      return false;
-    }
-
-    if (t instanceof ApplicationFailure
-        && ((ApplicationFailure) t).getApplicationErrorCategory()
-            == ApplicationErrorCategory.BENIGN) {
-    }
-
-    // Handle WorkflowExecutionException, which wraps a protobuf Failure
-    if (t instanceof io.temporal.internal.worker.WorkflowExecutionException) {
-      io.temporal.api.failure.v1.Failure failure =
-          ((io.temporal.internal.worker.WorkflowExecutionException) t).getFailure();
-      if (failure.hasApplicationFailureInfo()
-          && failure.getApplicationFailureInfo().getCategory()
-              == io.temporal.api.enums.v1.ApplicationErrorCategory
-                  .APPLICATION_ERROR_CATEGORY_BENIGN) {
-        return true;
-      }
-    }
-
-    // Handle ActivityFailure, which wraps the actual ApplicationFailure
-    if (t instanceof io.temporal.failure.ActivityFailure) {
-      Throwable cause = t.getCause();
-      boolean result = cause != null && isBenignApplicationFailure(cause);
-      return result;
-    }
-
-    // Check the immediate cause.
-    Throwable cause = t.getCause();
-    boolean result =
-        cause != null
-            && cause instanceof ApplicationFailure
-            && ((ApplicationFailure) cause).getApplicationErrorCategory()
-                == ApplicationErrorCategory.BENIGN;
-    return result;
-  }
 }
diff --git a/temporal-sdk/src/main/java/io/temporal/failure/DefaultFailureConverter.java b/temporal-sdk/src/main/java/io/temporal/failure/DefaultFailureConverter.java
index 67715612..e835bb0b 100644
--- a/temporal-sdk/src/main/java/io/temporal/failure/DefaultFailureConverter.java
+++ b/temporal-sdk/src/main/java/io/temporal/failure/DefaultFailureConverter.java
@@ -27,6 +27,7 @@ import io.nexusrpc.handler.HandlerException;
 import io.temporal.api.common.v1.ActivityType;
 import io.temporal.api.common.v1.Payloads;
 import io.temporal.api.common.v1.WorkflowType;
+import io.temporal.api.enums.v1.ApplicationErrorCategory;
 import io.temporal.api.enums.v1.NexusHandlerErrorRetryBehavior;
 import io.temporal.api.failure.v1.*;
 import io.temporal.client.ActivityCanceledException;
@@ -107,7 +108,7 @@ public final class DefaultFailureConverter implements FailureConverter {
               info.hasNextRetryDelay()
                   ? ProtobufTimeUtils.toJavaDuration(info.getNextRetryDelay())
                   : null,
-              ApplicationErrorCategory.fromProto(info.getCategory()));
+              info.getCategory());
         }
       case TIMEOUT_FAILURE_INFO:
         {
@@ -154,7 +155,7 @@ public final class DefaultFailureConverter implements FailureConverter {
               new EncodedValues(details, dataConverter),
               cause,
               null,
-              ApplicationErrorCategory.UNSPECIFIED);
+              ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_UNSPECIFIED);
         }
       case ACTIVITY_FAILURE_INFO:
         {
@@ -217,7 +218,7 @@ public final class DefaultFailureConverter implements FailureConverter {
             new EncodedValues(Optional.empty(), dataConverter),
             cause,
             null,
-            ApplicationErrorCategory.UNSPECIFIED);
+            ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_UNSPECIFIED);
     }
   }
 
@@ -264,7 +265,7 @@ public final class DefaultFailureConverter implements FailureConverter {
           ApplicationFailureInfo.newBuilder()
               .setType(ae.getType())
               .setNonRetryable(ae.isNonRetryable())
-              .setCategory(ae.getApplicationErrorCategory().toProto());
+              .setCategory(ae.getApplicationErrorCategory());
       Optional<Payloads> details = ((EncodedValues) ae.getDetails()).toPayloads();
       if (details.isPresent()) {
         info.setDetails(details.get());
diff --git a/temporal-sdk/src/main/java/io/temporal/internal/activity/ActivityTaskExecutors.java b/temporal-sdk/src/main/java/io/temporal/internal/activity/ActivityTaskExecutors.java
index 3e399eed..8d59b7d6 100644
--- a/temporal-sdk/src/main/java/io/temporal/internal/activity/ActivityTaskExecutors.java
+++ b/temporal-sdk/src/main/java/io/temporal/internal/activity/ActivityTaskExecutors.java
@@ -36,7 +36,7 @@ import io.temporal.common.interceptors.ActivityInboundCallsInterceptor;
 import io.temporal.common.interceptors.ActivityInboundCallsInterceptor.ActivityOutput;
 import io.temporal.common.interceptors.Header;
 import io.temporal.common.interceptors.WorkerInterceptor;
-import io.temporal.failure.ApplicationFailure;
+import io.temporal.internal.common.FailureUtils;
 import io.temporal.internal.worker.ActivityTaskHandler;
 import io.temporal.payload.context.ActivitySerializationContext;
 import io.temporal.serviceclient.CheckedExceptionWrapper;
@@ -123,7 +123,7 @@ final class ActivityTaskExecutors {
               info.getActivityId(),
               info.getActivityType(),
               info.getAttempt());
-        } else if (ApplicationFailure.isBenignApplicationFailure(ex)) {
+        } else if (FailureUtils.isBenignApplicationFailure(ex)) {
           log.debug(
               "{} failure. ActivityId={}, activityType={}, attempt={}",
               local ? "Local activity" : "Activity",
diff --git a/temporal-sdk/src/main/java/io/temporal/internal/activity/ActivityTaskHandlerImpl.java b/temporal-sdk/src/main/java/io/temporal/internal/activity/ActivityTaskHandlerImpl.java
index 21836601..13f6d585 100644
--- a/temporal-sdk/src/main/java/io/temporal/internal/activity/ActivityTaskHandlerImpl.java
+++ b/temporal-sdk/src/main/java/io/temporal/internal/activity/ActivityTaskHandlerImpl.java
@@ -35,8 +35,8 @@ import io.temporal.common.converter.DataConverter;
 import io.temporal.common.interceptors.WorkerInterceptor;
 import io.temporal.common.metadata.POJOActivityImplMetadata;
 import io.temporal.common.metadata.POJOActivityMethodMetadata;
-import io.temporal.failure.ApplicationFailure;
 import io.temporal.internal.activity.ActivityTaskExecutors.ActivityTaskExecutor;
+import io.temporal.internal.common.FailureUtils;
 import io.temporal.internal.common.env.ReflectionUtils;
 import io.temporal.internal.worker.ActivityTask;
 import io.temporal.internal.worker.ActivityTaskHandler;
@@ -210,7 +210,7 @@ public final class ActivityTaskHandlerImpl implements ActivityTaskHandler {
     Scope ms =
         metricsScope.tagged(
             ImmutableMap.of(MetricsTag.EXCEPTION, exception.getClass().getSimpleName()));
-    if (!ApplicationFailure.isBenignApplicationFailure(exception)) {
+    if (!FailureUtils.isBenignApplicationFailure(exception)) {
       if (isLocalActivity) {
         ms.counter(MetricsType.LOCAL_ACTIVITY_EXEC_FAILED_COUNTER).inc(1);
         ms.counter(MetricsType.LOCAL_ACTIVITY_FAILED_COUNTER).inc(1);
diff --git a/temporal-sdk/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java b/temporal-sdk/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java
index 8309bed4..22de9773 100644
--- a/temporal-sdk/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java
+++ b/temporal-sdk/src/main/java/io/temporal/internal/replay/ReplayWorkflowExecutor.java
@@ -33,8 +33,8 @@ import io.temporal.api.protocol.v1.Message;
 import io.temporal.api.query.v1.WorkflowQuery;
 import io.temporal.api.update.v1.Input;
 import io.temporal.api.update.v1.Request;
-import io.temporal.failure.ApplicationFailure;
 import io.temporal.failure.CanceledFailure;
+import io.temporal.internal.common.FailureUtils;
 import io.temporal.internal.common.ProtobufTimeUtils;
 import io.temporal.internal.common.UpdateMessage;
 import io.temporal.internal.statemachines.WorkflowStateMachines;
@@ -154,7 +154,7 @@ final class ReplayWorkflowExecutor {
       metricsScope.counter(MetricsType.WORKFLOW_CANCELED_COUNTER).inc(1);
     } else if (failure != null) {
       workflowStateMachines.failWorkflow(failure.getFailure());
-      if (!ApplicationFailure.isBenignApplicationFailure(failure)) {
+      if (!FailureUtils.isBenignApplicationFailure(failure)) {
         metricsScope.counter(MetricsType.WORKFLOW_FAILED_COUNTER).inc(1);
       }
     } else {
diff --git a/temporal-sdk/src/main/java/io/temporal/internal/replay/ReplayWorkflowRunTaskHandler.java b/temporal-sdk/src/main/java/io/temporal/internal/replay/ReplayWorkflowRunTaskHandler.java
index beecd0ff..a8314470 100644
--- a/temporal-sdk/src/main/java/io/temporal/internal/replay/ReplayWorkflowRunTaskHandler.java
+++ b/temporal-sdk/src/main/java/io/temporal/internal/replay/ReplayWorkflowRunTaskHandler.java
@@ -41,8 +41,8 @@ import io.temporal.api.query.v1.WorkflowQuery;
 import io.temporal.api.query.v1.WorkflowQueryResult;
 import io.temporal.api.workflowservice.v1.GetSystemInfoResponse;
 import io.temporal.api.workflowservice.v1.PollWorkflowTaskQueueResponseOrBuilder;
-import io.temporal.failure.ApplicationFailure;
 import io.temporal.internal.Config;
+import io.temporal.internal.common.FailureUtils;
 import io.temporal.internal.common.SdkFlag;
 import io.temporal.internal.common.UpdateMessage;
 import io.temporal.internal.statemachines.ExecuteLocalActivityParameters;
@@ -267,7 +267,7 @@ class ReplayWorkflowRunTaskHandler implements WorkflowRunTaskHandler {
               implementationOptions.getFailWorkflowExceptionTypes();
           for (Class<? extends Throwable> failType : failTypes) {
             if (failType.isAssignableFrom(e.getClass())) {
-              if (!ApplicationFailure.isBenignApplicationFailure(e)) {
+              if (!FailureUtils.isBenignApplicationFailure(e)) {
                 metricsScope.counter(MetricsType.WORKFLOW_FAILED_COUNTER).inc(1);
               }
               throw new WorkflowExecutionException(
@@ -275,7 +275,7 @@ class ReplayWorkflowRunTaskHandler implements WorkflowRunTaskHandler {
             }
           }
           if (e instanceof WorkflowExecutionException
-              && !ApplicationFailure.isBenignApplicationFailure(e)) {
+              && !FailureUtils.isBenignApplicationFailure(e)) {
             metricsScope.counter(MetricsType.WORKFLOW_FAILED_COUNTER).inc(1);
           }
           throw wrap(e);
diff --git a/temporal-sdk/src/test/java/io/temporal/internal/worker/ActivityFailedMetricsTests.java b/temporal-sdk/src/test/java/io/temporal/internal/worker/ActivityFailedMetricsTests.java
index ba08d947..7bb2b967 100644
--- a/temporal-sdk/src/test/java/io/temporal/internal/worker/ActivityFailedMetricsTests.java
+++ b/temporal-sdk/src/test/java/io/temporal/internal/worker/ActivityFailedMetricsTests.java
@@ -35,11 +35,11 @@ import io.temporal.activity.ActivityInterface;
 import io.temporal.activity.ActivityMethod;
 import io.temporal.activity.ActivityOptions;
 import io.temporal.activity.LocalActivityOptions;
+import io.temporal.api.enums.v1.ApplicationErrorCategory;
 import io.temporal.client.WorkflowClient;
 import io.temporal.client.WorkflowFailedException;
 import io.temporal.client.WorkflowOptions;
 import io.temporal.common.reporter.TestStatsReporter;
-import io.temporal.failure.ApplicationErrorCategory;
 import io.temporal.failure.ApplicationFailure;
 import io.temporal.failure.TemporalFailure;
 import io.temporal.testing.internal.SDKTestWorkflowRule;
@@ -113,7 +113,10 @@ public class ActivityFailedMetricsTests {
         throw ApplicationFailure.newFailure("Non-benign activity failure", "NonBenignType");
       } else {
         throw ApplicationFailure.newFailureWithCategory(
-            "Benign activity failure", "BenignType", ApplicationErrorCategory.BENIGN, null);
+            "Benign activity failure",
+            "BenignType",
+            ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_BENIGN,
+            null);
       }
     }
   }
@@ -194,9 +197,11 @@ public class ActivityFailedMetricsTests {
     assertTrue(
         "Inner cause should be ApplicationFailure",
         e1.getCause().getCause() instanceof ApplicationFailure);
+    ApplicationFailure af = (ApplicationFailure) e1.getCause().getCause();
     assertFalse(
         "Failure should not be benign",
-        ApplicationFailure.isBenignApplicationFailure(e1.getCause().getCause()));
+        af.getApplicationErrorCategory()
+            == ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_BENIGN);
     assertEquals(
         "Non-benign activity failure",
         ((TemporalFailure) e1.getCause().getCause()).getOriginalMessage());
@@ -225,9 +230,11 @@ public class ActivityFailedMetricsTests {
     assertTrue(
         "Inner cause should be ApplicationFailure",
         e2.getCause().getCause() instanceof ApplicationFailure);
+    af = (ApplicationFailure) e1.getCause().getCause();
     assertTrue(
         "Failure should be benign",
-        ApplicationFailure.isBenignApplicationFailure(e2.getCause().getCause()));
+        af.getApplicationErrorCategory()
+            == ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_BENIGN);
     assertEquals(
         "Benign activity failure",
         ((TemporalFailure) e2.getCause().getCause()).getOriginalMessage());
@@ -250,7 +257,7 @@ public class ActivityFailedMetricsTests {
         getActivityTagsWithWorkerType("LocalActivityWorker", "LocalActivityWorkflow"));
 
     WorkflowClient client = testWorkflowRule.getWorkflowClient();
-    LocalActivityWorkflow nonBenignStub =
+    LocalActivityWorkflow localActivityWf =
         client.newWorkflowStub(
             LocalActivityWorkflow.class,
             WorkflowOptions.newBuilder()
@@ -258,7 +265,7 @@ public class ActivityFailedMetricsTests {
                 .validateBuildWithDefaults());
 
     WorkflowFailedException e1 =
-        assertThrows(WorkflowFailedException.class, () -> nonBenignStub.execute(false));
+        assertThrows(WorkflowFailedException.class, () -> localActivityWf.execute(false));
 
     assertTrue(
         "Cause should be ActivityFailure",
@@ -266,9 +273,11 @@ public class ActivityFailedMetricsTests {
     assertTrue(
         "Inner cause should be ApplicationFailure",
         e1.getCause().getCause() instanceof ApplicationFailure);
+    ApplicationFailure af = (ApplicationFailure) e1.getCause().getCause();
     assertFalse(
         "Failure should not be benign",
-        ApplicationFailure.isBenignApplicationFailure(e1.getCause().getCause()));
+        af.getApplicationErrorCategory()
+            == ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_BENIGN);
     assertEquals(
         "Non-benign activity failure",
         ((TemporalFailure) e1.getCause().getCause()).getOriginalMessage());
@@ -280,16 +289,7 @@ public class ActivityFailedMetricsTests {
         1);
 
     WorkflowFailedException e2 =
-        assertThrows(
-            WorkflowFailedException.class,
-            () ->
-                client
-                    .newWorkflowStub(
-                        LocalActivityWorkflow.class,
-                        WorkflowOptions.newBuilder()
-                            .setTaskQueue(testWorkflowRule.getTaskQueue())
-                            .validateBuildWithDefaults())
-                    .execute(true));
+        assertThrows(WorkflowFailedException.class, () -> localActivityWf.execute(true));
 
     assertTrue(
         "Cause should be ActivityFailure",
@@ -297,12 +297,12 @@ public class ActivityFailedMetricsTests {
     assertTrue(
         "Inner cause should be ApplicationFailure",
         e2.getCause().getCause() instanceof ApplicationFailure);
+    af = (ApplicationFailure) e2.getCause().getCause();
     assertTrue(
         "Failure should be benign",
-        ApplicationFailure.isBenignApplicationFailure(e2.getCause().getCause()));
-    assertEquals(
-        "Benign activity failure",
-        ((TemporalFailure) e2.getCause().getCause()).getOriginalMessage());
+        af.getApplicationErrorCategory()
+            == ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_BENIGN);
+    assertEquals("Benign activity failure", af.getOriginalMessage());
 
     // Expect metrics to remain unchanged for benign failure
     reporter.assertCounter(
diff --git a/temporal-sdk/src/test/java/io/temporal/internal/worker/WorkflowFailedMetricsTests.java b/temporal-sdk/src/test/java/io/temporal/internal/worker/WorkflowFailedMetricsTests.java
index 8ddb3b3f..9ad4af6a 100644
--- a/temporal-sdk/src/test/java/io/temporal/internal/worker/WorkflowFailedMetricsTests.java
+++ b/temporal-sdk/src/test/java/io/temporal/internal/worker/WorkflowFailedMetricsTests.java
@@ -29,11 +29,11 @@ import com.uber.m3.tally.RootScopeBuilder;
 import com.uber.m3.tally.Scope;
 import com.uber.m3.util.ImmutableMap;
 import io.temporal.api.common.v1.WorkflowExecution;
+import io.temporal.api.enums.v1.ApplicationErrorCategory;
 import io.temporal.client.WorkflowClient;
 import io.temporal.client.WorkflowFailedException;
 import io.temporal.client.WorkflowOptions;
 import io.temporal.common.reporter.TestStatsReporter;
-import io.temporal.failure.ApplicationErrorCategory;
 import io.temporal.failure.ApplicationFailure;
 import io.temporal.failure.TemporalFailure;
 import io.temporal.testing.internal.SDKTestWorkflowRule;
@@ -131,7 +131,10 @@ public class WorkflowFailedMetricsTests {
         throw ApplicationFailure.newFailure("Non-benign failure", "NonBenignType");
       } else {
         throw ApplicationFailure.newFailureWithCategory(
-            "Benign failure", "BenignType", ApplicationErrorCategory.BENIGN, null);
+            "Benign failure",
+            "BenignType",
+            ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_BENIGN,
+            null);
       }
     }
   }
@@ -213,8 +216,10 @@ public class WorkflowFailedMetricsTests {
 
     Throwable cause1 = e1.getCause();
     assertTrue("Cause should be ApplicationFailure", cause1 instanceof ApplicationFailure);
-    assertFalse(
-        "Failure should not be benign", ApplicationFailure.isBenignApplicationFailure(cause1));
+    boolean isBenign =
+        ((ApplicationFailure) cause1).getApplicationErrorCategory()
+            == ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_BENIGN;
+    assertFalse("Failure should not be benign", isBenign);
     assertEquals("Non-benign failure", ((TemporalFailure) cause1).getOriginalMessage());
 
     reporter.assertCounter(
@@ -232,7 +237,10 @@ public class WorkflowFailedMetricsTests {
 
     Throwable cause2 = e2.getCause();
     assertTrue("Cause should be ApplicationFailure", cause2 instanceof ApplicationFailure);
-    assertTrue("Failure should be benign", ApplicationFailure.isBenignApplicationFailure(cause2));
+    isBenign =
+        ((ApplicationFailure) cause2).getApplicationErrorCategory()
+            == ApplicationErrorCategory.APPLICATION_ERROR_CATEGORY_BENIGN;
+    assertTrue("Failure should be benign", isBenign);
     assertEquals("Benign failure", ((TemporalFailure) cause2).getOriginalMessage());
 
     reporter.assertCounter(
