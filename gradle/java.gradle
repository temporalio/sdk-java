subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.github.sherter.google-java-format'

    repositories {
        mavenCentral()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        withJavadocJar()
        withSourcesJar()
    }

    googleJavaFormat {
        toolVersion '1.7'
        include '**/*.java'
        exclude '**/generated/*'
        exclude '**/.idea/**'
    }

    compileJava {
        dependsOn 'googleJavaFormat'
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:none' << '-Xlint:deprecation' << '-Werror'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:none' << '-Xlint:deprecation' << '-Werror'
    }

    javadoc {
        options.encoding = 'UTF-8'
        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
        if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
            //https://stackoverflow.com/questions/53732632/gradle-javadoc-search-redirects-to-undefined-url
            //the flag is removed in java13: https://bugs.openjdk.java.net/browse/JDK-8215582
            options.addBooleanOption('-no-module-directories', true)
        }
    }

    // add a collection to track failedTests
    ext.failedTests = []

    test {
        testLogging {
            events 'passed', 'skipped', 'failed'
            exceptionFormat 'full'
            // Uncomment the following line if you want to see test logs in gradlew run.
            showStandardStreams true
        }
        forkEvery = 1
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        // Captures the list of failed tests to log after build is done.
        afterTest { TestDescriptor descriptor, TestResult result ->
            if (result.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
                failedTests << ["${descriptor.className}::${descriptor.name}"]
            }
        }
    }
    // print out tracked failed tests when the build has finished
    gradle.buildFinished {
        if (!failedTests.empty) {
            println "Failed tests for ${project.name}:"
            failedTests.each { failedTest ->
                println failedTest
            }
            println ""
        }
    }
}