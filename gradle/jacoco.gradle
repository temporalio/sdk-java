//./gradlew testCodeCoverageReport -Pjacoco

apply plugin: 'jacoco-report-aggregation'
apply plugin: 'com.github.nbaztec.coveralls-jacoco'

dependencies {
    jacocoAggregation project(':temporal-kotlin')
    jacocoAggregation project(':temporal-opentracing')
    jacocoAggregation project(':temporal-remote-data-encoder')
    jacocoAggregation project(':temporal-sdk')
    jacocoAggregation project(':temporal-serviceclient')
    jacocoAggregation project(':temporal-spring-boot-autoconfigure-alpha')
    jacocoAggregation project(':temporal-spring-boot-starter-alpha')
    jacocoAggregation project(':temporal-test-server')
    jacocoAggregation project(':temporal-testing')
}

def jacocoExclusions = [
        '**/io/temporal/api/**',
        '**/gogoproto/**',
        '**/io/temporal/internal/docker/RegisterTestNamespace**'
]

def jacocoSubprojects = (subprojects- project(':temporal-bom'))

reporting {
    reports {
        testCodeCoverageReport(JacocoCoverageReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

testCodeCoverageReport {
    reports {
        csv.required = true
        xml.required = true
    }

    getClassDirectories().setFrom(files(
            jacocoSubprojects.collect {it.fileTree(dir: "${it.buildDir}/classes", exclude: jacocoExclusions)}
    ))
}

coverallsJacoco {
    reportPath = "build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"
    reportSourceSets = jacocoSubprojects.sourceSets.main.allSource.srcDirs.flatten()
}

tasks.coverallsJacoco.dependsOn(testCodeCoverageReport)

subprojects {
    if (name == 'temporal-bom') {
        return
    }
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.9"
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled true
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: jacocoExclusions)
            }))
        }
    }

    test {
        // Some tests don't work with Jacoco.
        // It's not a bug, they are just written assuming that they are working not with a proxy, but a pure instance.
        exclude 'io/temporal/workflow/KotlinAsyncChildWorkflowTest.class'
    }

    testCodeCoverageReport.dependsOn jacocoTestReport
}