buildscript {
    ext {
        // 0.11.0 and later are build on JDK 11 bytecode version
        graalVersion = "${JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_11) ? '0.12.0' : '0.10.0'}"
    }
}

plugins {
    id 'application'
    id 'com.palantir.graal' version "${graalVersion}"
    id 'com.palantir.docker' version '0.34.0'
    id 'com.google.protobuf' version '0.8.19'
}

apply plugin: 'idea' // IntelliJ plugin to see files generated from protos

description = '''Temporal test workflow server'''

ext {
    cronUtilsVersion = '9.2.0'
}

dependencies {
    api(platform("io.grpc:grpc-bom:$grpcVersion"))

    api project(':temporal-sdk')
    implementation("io.grpc:grpc-core")
    implementation("io.grpc:grpc-services")
    if (JavaVersion.current().isJava9Compatible()) {
        //needed for the generated grpc stubs and is not a part of JDK since java 9
        implementation "javax.annotation:javax.annotation-api:$annotationApiVersion"
    }

    implementation "com.google.guava:guava:$guavaVersion"
    implementation "com.cronutils:cron-utils:${cronUtilsVersion}"

    testImplementation project(':temporal-testing')
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"

    testRuntimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: "${logbackVersion}"
}

application {
    getMainClass().set('io.temporal.testserver.TestServer')
}

jar {
    exclude '**.proto'
    includeEmptyDirs false

    manifest {
        attributes("Main-Class": application.getMainClass().get())
    }
}

protobuf {
    // version/variables substitution is not supported in protobuf section.
    // protoc and protoc-gen-grpc-java versions are selected to be compatible
    // with the oldest supported versions of protoc and grpc artifacts.
    // For aarch64 (M1) using oldest version with binary available for this platform
    if (System.getProperty("os.arch") == 'aarch64') {
        protoc {
            artifact = 'com.google.protobuf:protoc:3.21.12'
        }
        plugins {
            grpc {
                artifact = 'io.grpc:protoc-gen-grpc-java:1.48.2'
            }
        }
    } else {
        protoc {
            artifact = 'com.google.protobuf:protoc:3.10.1'
        }
        plugins {
            grpc {
                artifact = 'io.grpc:protoc-gen-grpc-java:1.34.1'
            }
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                outputSubDir = 'java'
            }
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

protobuf {
    generatedFilesBaseDir = "$buildDir/generated"
}

// Needed to include generated files into the source jar
sourcesJar {
    dependsOn 'generateProto'
    from(file("$buildDir/generated/main/java"))
}

idea {
    module {
        sourceDirs += file("$buildDir/generated/main/java")
        sourceDirs += file("$buildDir/generated/main/grpc")
    }
}


graal {
  outputName "temporal-test-server"
  mainClass application.getMainClass().get()
  javaVersion '17'
  graalVersion '22.3.0'

  // Don't fallback to running a JVM
  option "--no-fallback"

  // Signal handling so that ^C actually stops the process
  option "--install-exit-handlers"

  // If we're on linux, static link everything but libc. Otherwise link
  // everything dynamically (note the '-' rather than '+' in fromt of
  // StaticExecutable)
  option isLinux()
    ? "-H:+StaticExecutableWithDynamicLibC"
    : "-H:-StaticExecutable"
}

docker {
  name "temporalio/temporal-test-server:${version}"
  files tasks.nativeImage.outputs
}

def isLinux() {
  return System.properties['os.name'].toLowerCase().contains('linux')
}

tasks.build.dependsOn('nativeImage')
