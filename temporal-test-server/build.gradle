plugins {
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.10.6' apply false
    id 'com.google.protobuf' version '0.9.5'
}

apply plugin: 'idea' // IntelliJ plugin to see files generated from protos

description = '''Temporal test workflow server'''

dependencies {
    api project(':temporal-sdk')
    if (JavaVersion.current().isJava9Compatible()) {
        //needed for the generated grpc stubs and is not a part of JDK since java 9
        compileOnly "javax.annotation:javax.annotation-api:$annotationApiVersion"
    }

    implementation "com.google.guava:guava:$guavaVersion"
    implementation("com.cronutils:cron-utils:${cronUtilsVersion}") {
        // com.cronutils:cron-utils:9.2.1 carries slf4j 2.x
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    testImplementation project(':temporal-testing')
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"

    testRuntimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: "${logbackVersion}"
}

application {
    getMainClass().set('io.temporal.testserver.TestServer')
}

jar {
    exclude '**/*.proto'
    includeEmptyDirs false

    manifest {
        attributes("Main-Class": application.getMainClass().get())
    }
}

// Needed to include generated files into the source jar
sourcesJar {
    dependsOn 'generateProto'
    from(file("$buildDir/generated/main/java"))
        // Solves: "Entry gogoproto/Gogo.java is a duplicate but no duplicate handling strategy has been set.
        // Please refer to https://docs.gradle.org/7.6/dsl/org.gradle.api.tasks.Copy.html#org.gradle.api.tasks.Copy:duplicatesStrategy for details."
        .setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

protobuf {
    // version/variables substitution is not supported in protobuf section.
    // protoc and protoc-gen-grpc-java versions are selected to be compatible
    // with the oldest supported versions of protoc and grpc artifacts.
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.5' + (System.getProperty("os.arch") == 'aarch64' && System.getProperty("os.name") == 'Mac OS X' ? ':osx-x86_64' : '')
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.34.1' + (System.getProperty("os.arch") == 'aarch64' && System.getProperty("os.name") == 'Mac OS X' ? ':osx-x86_64' : '')
        }
    }
    generateProtoTasks {
        all()*.builtins {
            java {
                option 'annotate_code'
            }
        }
        all()*.plugins {
            grpc {
                outputSubDir = 'java'
            }
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

protobuf {
    generatedFilesBaseDir = "$buildDir/generated"
}

idea {
    module {
        sourceDirs += file("$buildDir/generated/main/java")
        sourceDirs += file("$buildDir/generated/main/grpc")
    }
}


def isLinux() {
    return System.properties['os.name'].toLowerCase().contains('linux')
}

// The graalvm plugin requires we build with Java 11
if (project.hasProperty("nativeBuild")) {
    apply plugin: 'org.graalvm.buildtools.native'

    graalvmNative {
        toolchainDetection = true
        agent {
            enabled = true
            defaultMode = "standard"
            metadataCopy {
                outputDirectories.add("src/main/resources/META-INF/native-image/io.temporal/temporal-test-server")
                mergeWithExisting = false
            }

        }
        binaries {
            main {
                mainClass = application.getMainClass().get()
                sharedLibrary = false
                // Signal handling so that ^C actually stops the process
                buildArgs.add("--install-exit-handlers")
                // If we're on linux, static link everything but libc. Otherwise link
                // everything dynamically (note the '-' rather than '+' in front of
                // StaticExecutable)
                buildArgs.add(isLinux() ? "-H:+StaticExecutableWithDynamicLibC": "-H:-StaticExecutable")
                buildArgs.add("-H:+UnlockExperimentalVMOptions")
                buildArgs.add("-O4")

                runtimeArgs.add("7233")
            }
        }
        binaries.all {
            verbose = true
        }
    }
}
