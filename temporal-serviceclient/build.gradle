plugins {
    id 'com.google.protobuf' version '0.8.17'
}

apply plugin: 'idea' // IntelliJ plugin to see files generated from protos

description = '''Temporal Workflow Java SDK'''

dependencies {
    api 'io.grpc:grpc-protobuf:1.40.1'
    api 'io.grpc:grpc-stub:1.40.1'
    api 'io.grpc:grpc-core:1.40.1'
    api 'io.grpc:grpc-netty-shaded:1.40.1'
    api 'io.grpc:grpc-services:1.40.1'
    api group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.18.0'
    api group: 'com.uber.m3', name: 'tally-core', version: '0.6.1'
    api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'
    if (!JavaVersion.current().isJava8()) {
        implementation 'javax.annotation:javax.annotation-api:1.3.2'
    }

    testImplementation project(':temporal-testing')
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: "${logbackVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.12.4'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
}

task initSubmodules(type: Exec) {
    description = 'Initializes submodules'
    commandLine 'git', 'submodule', 'init'
}

task updateSubmodules(type: Exec) {
    dependsOn initSubmodules
    description = 'Update submodules'
    commandLine 'git', 'submodule', 'update'
}

//TODO(maxim): For some reason the following doesn't exclude proto files from the lib jar.
// But it should according to https://github.com/google/protobuf-gradle-plugin/issues/390
jar {
    exclude '**.proto'
    includeEmptyDirs false
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.18.0'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.40.1'
        }
    }
    generateProtoTasks {
        all().each { task -> task.dependsOn updateSubmodules }
        all()*.plugins {
            grpc {
                outputSubDir = 'java'
            }
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

protobuf {
    generatedFilesBaseDir = "$buildDir/generated"
}

idea {
    module {
        sourceDirs += file("$buildDir/generated/main/java")
        sourceDirs += file("$buildDir/generated/main/grpc")
    }
}


// Generation version.properties for value to be included into the request header
task createProperties(dependsOn: processResources) {
    doLast {
        def subdir = new File("$buildDir/resources/main/io/temporal/")
        if (!subdir.exists()) {
            subdir.mkdirs()
        }
        new File("$buildDir/resources/main/io/temporal/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['temporal-client-version'] = getClientVersionName()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

// Needed to include generated files into the source jar
tasks.sourcesJar.from(file("$buildDir/generated/main/java"))

task registerNamespace(type: JavaExec) {
    main = 'io.temporal.internal.docker.RegisterTestNamespace'
    classpath = sourceSets.test.runtimeClasspath
}

test.dependsOn 'registerNamespace'
