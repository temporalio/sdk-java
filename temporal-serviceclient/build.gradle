plugins {
    id 'com.google.protobuf' version '0.8.17'
}

apply plugin: 'idea' // IntelliJ plugin to see files generated from protos

description = '''Temporal Workflow Java SDK'''

dependencies {
    api "io.grpc:grpc-api:$grpcVersion" //Classes like io.grpc.Metadata are used as a part of our API
    api "io.grpc:grpc-stub:$grpcVersion" //Part of WorkflowServiceStubs API
    api "io.grpc:grpc-netty-shaded:$grpcVersion" //Part of WorkflowServiceStubs API, specifically SslContext
    api "com.google.protobuf:protobuf-java-util:$protoVersion" //proto request and response objects are a part of this module's API
    api "com.uber.m3:tally-core:$tallyVersion"

    implementation "io.grpc:grpc-core:$grpcVersion"
    implementation "io.grpc:grpc-services:$grpcVersion"

    api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'
    if (!JavaVersion.current().isJava8()) {
        implementation 'javax.annotation:javax.annotation-api:1.3.2'
    }

    testImplementation project(':temporal-testing')
    testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "junit:junit:4.13.2"
}

task initSubmodules(type: Exec) {
    description = 'Initializes submodules'
    commandLine 'git', 'submodule', 'init'
}

task updateSubmodules(type: Exec) {
    dependsOn initSubmodules
    description = 'Update submodules'
    commandLine 'git', 'submodule', 'update'
}

//TODO(maxim): For some reason the following doesn't exclude proto files from the lib jar.
// But it should according to https://github.com/google/protobuf-gradle-plugin/issues/390
jar {
    exclude '**.proto'
    includeEmptyDirs false
}

protobuf {
    // version/variables substitution is not supported in protobuf section.
    // protoc and protoc-gen-grpc-java versions are selected to be compatible
    // with the oldest supported versions of protoc and grpc artifacts.
    protoc {
        artifact = 'com.google.protobuf:protoc:3.10.0'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.42.0'
        }
    }
    generateProtoTasks {
        all().each { task -> task.dependsOn updateSubmodules }
        all()*.plugins {
            grpc {
                outputSubDir = 'java'
            }
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

protobuf {
    generatedFilesBaseDir = "$buildDir/generated"
}

idea {
    module {
        sourceDirs += file("$buildDir/generated/main/java")
        sourceDirs += file("$buildDir/generated/main/grpc")
    }
}


// Generation version.properties for value to be included into the request header
task createProperties(dependsOn: processResources) {
    doLast {
        def subdir = new File("$buildDir/resources/main/io/temporal/")
        if (!subdir.exists()) {
            subdir.mkdirs()
        }
        new File("$buildDir/resources/main/io/temporal/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['temporal-client-version'] = getClientVersionName()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

// Needed to include generated files into the source jar
sourcesJar {
    dependsOn 'generateProto'
    from(file("$buildDir/generated/main/java"))
}

task registerNamespace(type: JavaExec) {
    main = 'io.temporal.internal.docker.RegisterTestNamespace'
    classpath = sourceSets.test.runtimeClasspath
}

test.dependsOn 'registerNamespace'
