plugins {
    id 'com.google.protobuf' version '0.9.2'
}

apply plugin: 'idea' // IntelliJ plugin to see files generated from protos

description = '''Temporal Workflow Java SDK'''

dependencies {
    api(platform("io.grpc:grpc-bom:$grpcVersion"))

    api "io.grpc:grpc-api" //Classes like io.grpc.Metadata are used as a part of our API
    api "io.grpc:grpc-stub" //Part of WorkflowServiceStubs API
    api "io.grpc:grpc-netty-shaded" //Part of WorkflowServiceStubs API, specifically SslContext
    api "io.grpc:grpc-services" //Standard gRPC HealthCheck Response class
    api "com.google.protobuf:protobuf-java-util:$protoVersion" //proto request and response objects are a part of this module's API
    if (JavaVersion.current().isJava9Compatible()) {
        //needed for the generated grpc stubs and is not a part of JDK since java 9
        implementation "javax.annotation:javax.annotation-api:$annotationApiVersion"
    }

    api "com.uber.m3:tally-core:$tallyVersion"

    implementation "io.grpc:grpc-core"

    api "org.slf4j:slf4j-api:$slf4jVersion"

    testImplementation project(':temporal-testing')
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"

    testRuntimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"
}

task initSubmodules(type: Exec) {
    description = 'Initializes submodules'
    commandLine 'git', 'submodule', 'init'
}

task updateSubmodules(type: Exec) {
    dependsOn initSubmodules
    description = 'Update submodules'
    commandLine 'git', 'submodule', 'update'
}

//TODO(maxim): For some reason the following doesn't exclude proto files from the lib jar.
// But it should according to https://github.com/google/protobuf-gradle-plugin/issues/390
jar {
    exclude '**.proto'
    includeEmptyDirs false
}

// Needed to include generated files into the source jar
sourcesJar {
    dependsOn 'generateProto'
    from(file("$buildDir/generated/main/java"))
        // Solves: "Entry gogoproto/Gogo.java is a duplicate but no duplicate handling strategy has been set.
        // Please refer to https://docs.gradle.org/7.6/dsl/org.gradle.api.tasks.Copy.html#org.gradle.api.tasks.Copy:duplicatesStrategy for details."
        .setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

protobuf {
    // version/variables substitution is not supported in protobuf section.
    // protoc and protoc-gen-grpc-java versions are selected to be compatible
    // with the oldest supported versions of protoc and grpc artifacts.
    protoc {
        artifact = 'com.google.protobuf:protoc:3.10.1' + (System.getProperty("os.arch") == 'aarch64' ? ':osx-x86_64' : '')
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.34.1' + (System.getProperty("os.arch") == 'aarch64' ? ':osx-x86_64' : '')
        }
    }
    generateProtoTasks {
        all().each { task -> task.dependsOn updateSubmodules }
        all()*.plugins {
            grpc {
                outputSubDir = 'java'
            }
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

protobuf {
    generatedFilesBaseDir = "$buildDir/generated"
}

javadocJar {
    dependsOn 'generateProto'
    from(file("$buildDir/generated/main/java"))
}

idea {
    module {
        sourceDirs += file("$buildDir/generated/main/java")
        sourceDirs += file("$buildDir/generated/main/grpc")
    }
}


// Generation version.properties for value to be included into the request header
task createProperties(dependsOn: processResources) {
    doLast {
        def subdir = new File("$buildDir/resources/main/io/temporal/")
        if (!subdir.exists()) {
            subdir.mkdirs()
        }
        new File("$buildDir/resources/main/io/temporal/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['temporal-client-version'] = getClientVersionName()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

task registerNamespace(type: JavaExec) {
    getMainClass().set('io.temporal.internal.docker.RegisterTestNamespace')
    classpath = sourceSets.test.runtimeClasspath
}

test.dependsOn 'registerNamespace'
