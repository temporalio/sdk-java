buildscript {
    ext {
        palantirGitVersionVersion = "${JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_11) ? '0.15.0' : '0.13.0'}"
    }
}

plugins {
    id 'net.ltgt.errorprone' version '4.1.0' apply false
    id 'com.palantir.git-version' version "${palantirGitVersionVersion}" apply false
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'com.diffplug.spotless' version '7.0.2' apply false
    id 'com.github.nbaztec.coveralls-jacoco' version "1.2.20" apply false

    //    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
    //    id 'org.jetbrains.kotlin.jvm' version '1.5.32'
    //    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    //    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    //    id 'org.jetbrains.kotlin.jvm' version '1.8.20'
    id 'org.jetbrains.kotlin.jvm' version '1.9.24' apply false
    id 'base'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

ext {
    // Platforms
    grpcVersion = '1.58.1' // [1.38.0,) Needed for io.grpc.protobuf.services.HealthStatusManager
    jacksonVersion = '2.14.2' // [2.9.0,)
    nexusVersion = '0.4.0-alpha'
    // we don't upgrade to 1.10.x because it requires kotlin 1.6. Users may use 1.10.x in their environments though.
    micrometerVersion = project.hasProperty("edgeDepsTest") ? '1.13.6' : '1.9.9' // [1.0.0,)

    // stay on 1.x for a while to don't use any APIs from 2.x which may break our users which still stay on 1.x
    // also slf4j 2.x is not compatible with spring boot 2.x
    slf4jVersion = project.hasProperty("edgeDepsTest") ? '2.0.16' : '1.7.36' // [1.4.0,)
    // [3.25.5,)
    // 3.25.5 is required because of our protoc compiler 25.x. The proto version must be the same or greater then the protoc version.
    // We use this version of protoc because it will generate code that is compatible with protobuf-java 3.x and 4.x.
    // We don't move past 3.25.x because the next version is a major version bump and we don't want to break our users.
    //
    // For more information see: https://github.com/grpc/grpc-java/issues/11015#issuecomment-2560196695
    protoVersion = '3.25.7'
    annotationApiVersion = '1.3.2'
    guavaVersion = '32.0.1-jre' // [10.0,)
    tallyVersion = '0.13.0' // [0.4.0,)

    gsonVersion = '2.10.1' // [2.0,)

    jsonPathVersion = '2.9.0' // compileOnly

    cronUtilsVersion = '9.2.1' // for test server only

    // Spring Boot 3 requires Java 17, java-sdk builds against 2.x version because we support Java 8.
    // We do test compatibility with Spring Boot 3 in integration tests.
    springBootVersion = project.hasProperty("edgeDepsTest") ? '3.1.12' : '2.7.18'// [2.4.0,)

    // test scoped
    // we don't upgrade to 1.3 and 1.4 because they require slf4j 2.x
    logbackVersion = project.hasProperty("edgeDepsTest") ? '1.3.5' : '1.2.11'
    mockitoVersion = '5.14.2'
    junitVersion = '4.13.2'
    // Edge Dependencies are used by tests to validate the SDK with the latest version of various libraries.
    // Not just the version of the library the SDK is built against.
    protoVersionEdge = '4.31.0'
    grpcVersionEdge = '1.72.0'
}

apply from: "$rootDir/gradle/versioning.gradle"
apply from: "$rootDir/gradle/java.gradle"
if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_11)) {
    apply from: "$rootDir/gradle/linting.gradle"
}
apply from: "$rootDir/gradle/errorprone.gradle"
apply from: "$rootDir/gradle/publishing.gradle"
apply from: "$rootDir/gradle/dependencyManagement.gradle"
apply from: "$rootDir/gradle/gatherDependencies.gradle"
if (project.hasProperty("jacoco")) {
    apply from: "$rootDir/gradle/jacoco.gradle"
}