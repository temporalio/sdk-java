buildscript {
    ext {
        palantirGitVersionVersion = "${JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_11) ? '0.15.0' : '0.13.0'}"
        kotlinVersion = "${project.hasProperty("edgeDepsTest") ? '1.8.0' : (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_16) ? '1.5.32' : '1.4.32')}"
    }
}

plugins {
    id 'net.ltgt.errorprone' version '3.0.1' apply false
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'com.palantir.git-version' version "${palantirGitVersionVersion}" apply false
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'com.diffplug.spotless' version '6.13.0' apply false
    id 'com.github.nbaztec.coveralls-jacoco' version "1.2.15" apply false

    //    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
    //    id 'org.jetbrains.kotlin.jvm' version '1.5.32'
    //    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    //    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    //    id 'org.jetbrains.kotlin.jvm' version '1.8.0'
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}" apply false
    id 'base'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

ext {
    // Platforms
    grpcVersion = '1.52.1' // [1.34.0,)
    jacksonVersion = '2.14.1' // [2.9.0,)
    // we don't upgrade to 1.10.x because it requires kotlin 1.6. Users may use 1.10.x in their environments though.
    micrometerVersion = project.hasProperty("edgeDepsTest") ? '1.10.3' : '1.9.7' // [1.0.0,)

    // stay on 1.x for a while to don't use any APIs from 2.x which may break our users which still stay on 1.x
    // also slf4j 2.x is not compatible with spring boot 2.x
    slf4jVersion = project.hasProperty("edgeDepsTest") ? '2.0.6' : '1.7.36' // [1.4.0,)
    protoVersion = '3.21.12' // [3.10.0,)
    annotationApiVersion = '1.3.2'
    guavaVersion = '31.1-jre' // [10.0,)
    tallyVersion = '0.12.0' // [0.4.0,)

    gsonVersion = '2.10.1' // [2.0,)

    jsonPathVersion = '2.7.0' // compileOnly

    // Spring Boot 3 requires Java 17, java-sdk builds against 2.x version because we support Java 8.
    // We do test compatibility with Spring Boot 3 in integration tests.
    springBootVersion = project.hasProperty("edgeDepsTest") ? '3.0.2' : '2.7.8'// [2.4.0,)

    // test scoped
    // we don't upgrade to 1.3 and 1.4 because they require slf4j 2.x
    logbackVersion = project.hasProperty("edgeDepsTest") ? '1.3.5' : '1.2.11'
    mockitoVersion = '5.0.0'
    junitVersion = '4.13.2'
}

apply from: "$rootDir/gradle/versioning.gradle"
apply from: "$rootDir/gradle/java.gradle"
if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_11)) {
    apply from: "$rootDir/gradle/linting.gradle"
}
apply from: "$rootDir/gradle/errorprone.gradle"
apply from: "$rootDir/gradle/licensing.gradle"
apply from: "$rootDir/gradle/publishing.gradle"
apply from: "$rootDir/gradle/dependencyManagement.gradle"
apply from: "$rootDir/gradle/gatherDependencies.gradle"
if (project.hasProperty("jacoco")) {
    apply from: "$rootDir/gradle/jacoco.gradle"
}