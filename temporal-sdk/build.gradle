description = '''Temporal Workflow Java SDK'''

dependencies {
    api(platform("io.grpc:grpc-bom:$grpcVersion"))
    api(platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion"))
    api(platform("io.micrometer:micrometer-bom:$micrometerVersion"))

    api project(':temporal-serviceclient')
    api "com.google.code.gson:gson:$gsonVersion"
    api "io.micrometer:micrometer-core"
    api "io.nexusrpc:nexus-sdk:$nexusVersion"

    implementation "com.google.guava:guava:$guavaVersion"
    api "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"

    // compileOnly and testImplementation because this dependency is needed only to work with json format of history
    // which shouldn't be needed for any production usage of temporal-sdk.
    // It's useful only for unit tests and debugging.
    // For these use-cases Temporal users can add this dep in the classpath temporary or permanently themselves.
    compileOnly "com.jayway.jsonpath:json-path:$jsonPathVersion"
    testImplementation("com.jayway.jsonpath:json-path:$jsonPathVersion"){
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    testImplementation project(':temporal-testing')
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: "${logbackVersion}"
    if (project.hasProperty("edgeDepsTest")) {
        testRuntimeOnly "com.google.protobuf:protobuf-java:$protoVersionEdge"
        testRuntimeOnly "com.google.protobuf:protobuf-java-util:$protoVersionEdge"
        testRuntimeOnly "io.grpc:grpc-bom:$grpcVersionEdge"
    }
}

// Temporal SDK supports Java 8 or later so to support virtual threads
// we need to compile the code with Java 21 and package it in a multi-release jar.
sourceSets {
    java21 {
        java {
            srcDirs = ['src/main/java21']
        }
    }
}

dependencies {
    java21Implementation files(sourceSets.main.output.classesDirs) { builtBy compileJava }
}

tasks.named('compileJava21Java') {
    // Gradle toolchains are too strict and require the JDK to match the specified version exactly.
    // This is a workaround to use a JDK 21+ compiler.
    //
    // See also: https://github.com/gradle/gradle/issues/16256
    if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_21)) {
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
    options.release = 21
}

jar {
    into('META-INF/versions/21') {
        from sourceSets.java21.output
    }
    manifest.attributes(
            'Multi-Release': 'true'
    )
}

task registerNamespace(type: JavaExec) {
    getMainClass().set('io.temporal.internal.docker.RegisterTestNamespace')
    classpath = sourceSets.test.runtimeClasspath
}

test.dependsOn 'registerNamespace'

test {
    useJUnit {
        excludeCategories 'io.temporal.worker.IndependentResourceBasedTests'
    }
}

task testResourceIndependent(type: Test) {
    useJUnit {
        includeCategories 'io.temporal.worker.IndependentResourceBasedTests'
        maxParallelForks = 1
    }
}

// To test the virtual thread support we need to run a separate test suite with Java 21
testing {
    suites {
        // Common setup for all test suites
        configureEach {
            useJUnit(junitVersion)
            dependencies {
                implementation project()
                implementation "ch.qos.logback:logback-classic:${logbackVersion}"
                implementation project(':temporal-testing')

                implementation "junit:junit:${junitVersion}"
                implementation "org.mockito:mockito-core:${mockitoVersion}"
                implementation 'pl.pragmatists:JUnitParams:1.1.1'
                implementation("com.jayway.jsonpath:json-path:$jsonPathVersion"){
                    exclude group: 'org.slf4j', module: 'slf4j-api'
                }
            }
            targets {
                all {
                    testTask.configure {
                        testLogging {
                            events 'passed', 'skipped', 'failed'
                            exceptionFormat 'full'
                            // Uncomment the following line if you want to see test logs in gradlew run.
                            showStandardStreams true
                        }
                    }
                }
            }
        }

        virtualThreadTests(JvmTestSuite) {
            targets {
                all {
                    testTask.configure {
                        javaLauncher = javaToolchains.launcherFor {
                            languageVersion = JavaLanguageVersion.of(21)
                        }
                        shouldRunAfter(test)
                    }
                }
            }
        }

        // Run the same test as the normal test task with virtual threads
        testsWithVirtualThreads(JvmTestSuite) {
            // Use the same source and resources as the main test set
            sources {
                java {
                    srcDirs = ['src/test/java']
                }
                resources {
                    srcDirs = ["src/test/resources"]
                }
            }

            targets {
                all {
                    testTask.configure {
                        javaLauncher = javaToolchains.launcherFor {
                            languageVersion = JavaLanguageVersion.of(21)
                        }
                        environment("USE_VIRTUAL_THREADS", "false")
                    }
                }
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.virtualThreadTests)
}